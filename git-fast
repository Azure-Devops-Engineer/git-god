#!/usr/bin/ruby
require 'find'
require 'tempfile'
require 'set'

CONFIG_FILE = ".git-fast"
TEMP_CONFIG = "temp.git-fast"
LOGGED = "logged"
DEFAULT_START_LOG = "["
DEFAULT_END_LOG = "]"
ADD = "add"
ALL = "all"
PUSH_ORIGIN = "push_origin"
ISSUE = "issue"
CURRENT_ISSUE = "current_issue"
ISSUE_DELIMITER = "#"
CLOSES = "Closes"
CONTRIBUTORS = "Contributors:"
MENTION = "@"
ISSUE_MENTION = "#"
PULL_ORIGIN = "pull_origin"

LOG_PRIORITY = 0
ADD_PRIORITY = 1
PUSH_ORIGIN_PRIORITY = 2
PULL_ORIGIN_PRIORITY = 3
CURRENT_PRIORITY = 4

def handleLog(args, index)
  defaultDelimiter = true
  start_del = DEFAULT_START_LOG
  end_del = DEFAULT_END_LOG

  if args.length == 1 then
    showNoLogIncludedError()
  end

  args.each_with_index do |arg, i|
    arg_spl = arg.split("=")
    case arg_spl[0]
    when "--del"

      if args.length == 2 then
        showNoLogIncludedError()
      end

      if arg_spl.length == 1 then
        showDelimiterNotIncludedError()
      end

      # only one character provided, use for both
      if arg_spl[1].length == 1 then
        log(args, i, arg_spl[1][0], arg_spl[1][0])
        return
      elsif arg_spl[1].length == 2 then
        log(args, i, arg_spl[1][0], arg_spl[1][1])
        return
      else
        showInvalidDelimiterError()
      end
    end
  end

  log(args, index, start_del, end_del)
end

def showNoLogIncludedError()
  puts "Error: no logs have been included."
  exit(128)
end

def showDelimiterNotIncludedError()
  puts "Error: delimiter is empty or it is invalid."
  toAddDelimiterTut()
end

def showInvalidDelimiterError()
  puts "Error: invalid delimiter supplied for log."
  toAddDelimiterTut()
end

def toAddDelimiterTut()
  puts "To add a delimiter, add flag --del=\"<delimiter>\". Note the double quotes."
  puts "<delimiter> must be one or two characters."
  exit(128)
end

def log(args, index, start_del, end_del)
  # find the previous logged info
  logUsers = ""
  file = openConfigFile()

  args[index + 1..-1].each do |arg|
    puts "Logged: #{arg}"
    logUsers += start_del + arg + end_del
  end

  writeToFileOrOverwrite(LOGGED, "#{LOGGED}=#{logUsers}")
  file.close
end

def isConfigFile(name)
  File.basename(name) == CONFIG_FILE
end

def writeToFileOrOverwrite(flag, newValue)
  tmp_file = Tempfile.new(TEMP_CONFIG)
  file = openConfigFile()
  hasBeenWritten = false
  begin
    file.each_line do |line|
      if line.split("=")[0] == flag then
      # overwrite
      hasBeenWritten = true
      tmp_file.puts(newValue)
      else
      tmp_file.puts(line)
      end
    end

  # no line exists
  if not hasBeenWritten then
    tmp_file.puts(newValue)
  end
  tmp_file.close
  # change the name and overwrite
  FileUtils.mv(tmp_file, file)
  file.close
ensure
  tmp_file.close
  tmp_file.unlink
  file.close
end
end

def writeToFile(file_name, value)
  #assumes file is not opened
  file = File.open(file_name, "a")
  file.puts(value)
  file.close
end

def deleteLineWithKey(key)
  tmp_file = Tempfile.new(TEMP_CONFIG)
  file = openConfigFile()
  begin
    file.each_line do |line|
      next if line.split("=")[0] == key
      tmp_file.puts(line)
    end
  tmp_file.close
  # change the name and overwrite
  FileUtils.mv(tmp_file, file)
  file
  ensure
  tmp_file.close
  tmp_file.unlink
  file.close
  end
end

def existsConfigFile()
Find.find(Dir.pwd) do |e|
  next if File.directory?(e)
  if isConfigFile(e) then return true end
end
false
end

def removeConfig(args, index)
  configFile = openConfigFile()
  shouldDeleteCurrentIssue = false
  if args.length == 1 then
    # flag is only -r, delete whole configuration
  if File.exist?(CONFIG_FILE) then File.delete(CONFIG_FILE) end
  else
    # delete specific attributes
    args[index + 1..-1].each do |flag|
      key = getKeyFromFlag(flag)
      # would delete all issues in case key is issue
      if key == ISSUE then shouldDeleteCurrentIssue = true end
      file = deleteLineWithKey(key)
      configFile = file
    end
  end

  # if all issues are deleted then also delete the current issue symbol
  if shouldDeleteCurrentIssue then deleteLineWithKey(CURRENT_ISSUE) end
  configFile.close
end

def showStatus()
  info = Hash.new
  issues = Set.new
  configFile = openConfigFile()
  configFile.each_line do |line|
    line_array = line.split("=")
    case line_array[0]
    when LOGGED
      info[LOG_PRIORITY] = line_array[1..-1]
    when ADD
      info[ADD_PRIORITY] = line_array[1..-1]
    when PUSH_ORIGIN
      info[PUSH_ORIGIN_PRIORITY] = line_array[1..-1]
    when PULL_ORIGIN
      info[PULL_ORIGIN_PRIORITY] = line_array[1..-1]
    when ISSUE
      issues << line_array[1..-1]
    when CURRENT_ISSUE
      info[CURRENT_PRIORITY] = line_array[1..-1]
    end
  end

  configFile.close

  info = Hash[info.sort]
  info.each do |k, v|
    case k
    when LOG_PRIORITY
      puts "logged: #{v[0]}"
    when ADD_PRIORITY
      if v[0].length != 0 then puts "add: " + ALL end
    when PUSH_ORIGIN_PRIORITY
      puts "pushing to: #{v[0]}"
    when PULL_ORIGIN_PRIORITY
      puts "pulling from: #{v[0]}"
    when CURRENT_PRIORITY
      puts "current issue: #{v[0]}"
    end
  end

  # if there is no current issue because it has been restored or never assigned
  if info[CURRENT_PRIORITY] == nil then puts "no current issues" end

  issues.each do |issue_line|
    if issue_line.length == 1 then
      puts "issue: #{issue_line[0]}"
    else
      puts "issue: #{issue_line[0]}, alias: #{issue_line[1]}"
    end
  end

end

def getValues()
  info = Hash.new
  issues = Set.new
  configFile = openConfigFile()
  configFile.each_line do |line|
    line_array = line.strip.split("=")
    if line_array[0] == ISSUE then
      # case when it is an issue, need to track name and alias
      aliasForName = ""
      if line_array[2] != nil then aliasForName = line_array[2] end
      issues << line_array[1] + "=" + aliasForName
    else
    info[line_array[0]] = line_array[1]
    end
  end
  return info, issues
end

def openConfigFile()
  File.open(CONFIG_FILE, "r+")
end

def commit(args, index, flag, shouldCommit)
  values, issues = getValues()

  message = generateMessageForCommit(values, issues, args, flag, shouldCommit)
  # if the flag is set, commit, otherwise just print the commit
  if shouldCommit then
    addAndCommit(values, message)
  else
    puts message
  end
end

def generateMessageForCommit(values, issues, args, flag, shouldCommit)

  if shouldCommit and args.length < 2 then showInvalidSizeCommit(flag) end

  # if there are enough arguments, check that the first one to the commit flag
  # is not a flag
  if args.length > 1 and isFlag(args[1]) then
    showFlagExpectingMessageError(flag, args[1])
  end

  logUsers = values[LOGGED]
  issue = values[CURRENT_ISSUE]

  message = ""

  if isDefined(logUsers) then
    message += logUsers
  end

  if isDefined(issue) then
    message += ISSUE_DELIMITER + issue
  end

  message += " " + args[1].to_s

  if args.length > 2 then
    # commit message might have additional flags
    # starting from third argument
    message = additionalFlagsToCommit(args, message, 2, flag)
  end
  message
end

def addAndCommit(values, message)
  addAtts = values[ADD]
  if isDefined(addAtts) then
    puts "adding all"
    # puts `git add -A`
  end
  puts "commiting..."
  puts "\"#{message}\""
  # puts `git commit -m \"#{message}\"`
end

def additionalFlagsToCommit(args, message, index, flag)
  # starting from the third argument
  case args[index]
  when "-cl"
    closes(args, message, index, flag)
  when "-ct"
    contributes(args, message, index, flag)
  end
end

def closes(args, message, indexOnEntry, flag)
  # if the arguments are less than the given index plus one argument, throw an error
  addAppendingFlag(args, message, indexOnEntry, flag, CLOSES, ISSUE_MENTION)
end


def contributes(args, message, indexOnEntry, flag)
  addAppendingFlag(args, message, indexOnEntry, flag, CONTRIBUTORS, MENTION)
end

def addAppendingFlag(args, message, indexOnEntry, flag, preceding, beforeRef)
  if args.length <= indexOnEntry + 1 then showInvalidSizeCommit(flag) end
  refs = Array.new
  # start at argument
  index = indexOnEntry + 1
  while index < args.length and not isFlag(args[index]) do
    refs << args[index]
    index += 1
  end
  refs = addToStart(refs, beforeRef)
  refs = refs.join(", ")
  stripped_msg = args[1].strip
  # if the last character is a full stop or the message is empty then dont add
  # another full stop
  if message.strip()[message.length - 1] == '.' or stripped_msg.length == 0 then
    message = message + " #{preceding} #{refs}."
  else
    message = message + ". #{preceding} #{refs}."
  end
  if index < args.length then
    message = additionalFlagsToCommit(args, message, index, flag)
  end
  message
end

def addToStart(refs, beforeRef)
  result = Array.new
  refs.each do |ref|
    result << beforeRef + ref
  end
  result
end

def isFlag(str)
  str[0] == '-'
end

def showFlagExpectingMessageError(flag, value)
  puts "Error: #{flag} expects a message, but got \"#{value}\"."
  expectedCommit(flag)
end

def expectedCommit(flag)
  puts "Expected: git-fast #{flag} \"<some message>\" [-cl <args>|-ct <args>]"
  exit(128)
end

def push(args, index, flag, alwaysLoadFromConfiguration, takesLessThanTwoArgs)

  if takesLessThanTwoArgs and args.length > 2 then
    showTooManyArgumentsError(flag, 1, args.length - 1)
  end

  values, issues = getValues()
  # if always load from configuration then it is a -p from -cp
  if alwaysLoadFromConfiguration then
    pushAtts = values[PUSH_ORIGIN]
  else
  # if we do not need to load from configuration, and there is a branch push to
  # that branch. If there is not a branch, then it will be nil, and will default
  # to master
    if args.length == 2 then
      pushAtts = args[1]
    else
      # there is only one argument, get from configuration
      # if configuration is nil then will default to master below
      pushAtts = values[PUSH_ORIGIN]
    end
  end

  if not isDefined(pushAtts) then
    puts "pushing normal origin master"
    # puts `git push origin master`
  else
    puts "pushing origin #{pushAtts}"
    # puts `git push origin #{branch}`
  end
end

def pushAtts(args, index)
  if args.length == 1 then
    showPushAttsWithNoAttsError()
  end

  args[1..-1].each do |value|
    value_spl = value.split("=")
    if value_spl.length == 1 then showPushAttsWithNoAttsError end
    case value_spl[0]
    when "--o"
      writeToFileOrOverwrite(PUSH_ORIGIN, "#{PUSH_ORIGIN}=#{value_spl[1]}")
    else
      unsupportedCommand(value_spl[0])
    end
  end
end

def pullAtts(args)
  if args.length == 1 then
    showPullAttsWithNoAttsError()
  end

  args[1..-1].each do |value|
    value_spl = value.split("=")
    if value_spl.length == 1 then showPullAttsWithNoAttsError end
    case value_spl[0]
    when "--o"
      writeToFileOrOverwrite(PULL_ORIGIN, "#{PULL_ORIGIN}=#{value_spl[1]}")
    else
      unsupportedCommand(value_spl[0])
    end
  end
end

def showInvalidSizeCommit(callingFlag)
  puts "Error: trying to commit but incorrect number of arguments supplied."
  expectedCommit(callingFlag)
end

def showPushAttsWithNoAttsError()
  puts "Error: trying to add a configuration for push but no attributes are found."
  puts "To add a configuration for push, use \"git-fast -pc --o=<branch-name>\"."
  exit(128)
end

def showPullAttsWithNoAttsError()
  puts "Error: trying to add a configuration for pull but no attributes are found."
  puts "To add a configuration for pull, use \"git-fast -pl --o=<branch-name>\"."
  exit(128)
end

def isDefined(val)
  val != nil
end

def alwaysAddAll()
  writeToFileOrOverwrite(ADD, "#{ADD}=#{ALL}")
end

def getKeyFromFlag(flag)
  if not isConfigurable(flag) then
    puts "Error: configuration for #{flag} cannot be removed."
    puts "The flag #{flag} is non configurable or does not exist."
    exit(128)
  end
  case flag
  when "-l"
    LOGGED
  when "-pc"
    PUSH_ORIGIN
  when "-plc"
    PULL_ORIGIN
  when "-a"
    ADD
  when "-i"
    ISSUE
  end
end

def isConfigurable(flag)
  flag == "-l" or flag == "-pc" or flag == "-a" or flag == "-i" or flag == "-plc"
end

def issue(args, index)
  if not correctIssueArgLength(args) then showIncorrectIssueArgLengthError(args.length) end
  # if length is one, then we want to commit without issue
  if args.length == 1 then
    deleteLineWithKey(CURRENT_ISSUE)
    exit(0)
  end
  name = ""
  aliasForName = nil

  args[index + 1..-1].each do |arg|
    arg_spl = arg.split("=")
    case arg_spl[0]
    when "--name"
      name = arg_spl[1]
    when "--alias"
      aliasForName = arg_spl[1]
    else
      values, issues = getValues()
      if arg_spl[0][1..-1] == values[CURRENT_ISSUE] then
        exit(0)
      end
      # it must be an alias or name
      name = getNameFromAlias(arg_spl[0][1..-1].strip)
      if name == nil then showErrorIssueDoesNotExist(arg_spl[0][1..-1]) end
      writeToFileOrOverwrite(CURRENT_ISSUE, "#{CURRENT_ISSUE}=#{name}")
      puts "Current issue: #{name}"
      exit(0) # job is done, no need to add any issues
    end
  end

  if name == nil then showNoNameForIssueError end

  # writeToFile leaves configFile closed
  if aliasForName == nil then
    writeToFileOrOverwrite(CURRENT_ISSUE, "#{CURRENT_ISSUE}=#{name}")
    writeToFile(CONFIG_FILE, "#{ISSUE}=#{name}")
  else
    writeToFileOrOverwrite(CURRENT_ISSUE, "#{CURRENT_ISSUE}=#{name}=#{aliasForName}")
    writeToFile(CONFIG_FILE, "#{ISSUE}=#{name}=#{aliasForName}")
  end

end

def getNameFromAlias(aliasOrName)
  configFile = openConfigFile()
  begin
    configFile.each_line do |line|
      line_spl = line.strip.split("=")
      next if line_spl[0] != ISSUE
      # line is an issue
      if aliasOrName == line_spl[1] or aliasOrName == line_spl[2] then
        return line_spl[1]
      end
    end
    # if not found return nil
    nil
  ensure
    configFile.close
  end
end

def showErrorIssueDoesNotExist(name)
  puts "Error: issue with name #{name} or alias #{name} does not exist."
  expectedForIssue()
end

def correctIssueArgLength(args)
  args.length >= 1 and args.length <= 3
end

def showNoNameForIssueError()
  puts "Error: no name was supplied for a new issue."
  expectedForIssue()
end

def showIncorrectIssueArgLengthError(len)
  puts "Error: Creating a new issue expects a name and an optional alias."
  expectedForIssue()
end

def expectedForIssue()
  puts "Expected: \"git-fast -i --name=<issue-name>\" or \"git-fast -i --name=<issue-name> --alias=<alias>\"."
  puts "To set the current issue, use \"git-fast -i -<alias or name of issue>\"."
  exit(128)
end

def unsupportedCommand(arg)
  puts "Error: unexpected command \"#{arg}\" found."
  puts "To view a full list of all arguments to git-fast, run git-fast --commands."
end

def printCommands()
  puts ""
  puts "List of commands in git-fast:"
  puts "Note: opt(x) means x is optional."
  puts ""
  puts "git-fast -a"
  puts "git-fast -b"
  puts "git-fast -ba"
  puts "git-fast -c \"<some message>\" [-cl <args>|-ct <args>]"
  puts "git-fast -ch <branch-name>"
  puts "git-fast -cn <repo-url>"
  puts "git-fast --commands"
  puts "git-fast -cp \"<some message>\" [-cl <args>|-ct <args>]"
  puts "git-fast -d <branch-name>"
  puts "git-fast -di"
  puts "git-fast -fa"
  puts "git-fast -gs"
  puts "git-fast -i opt([--name=<name> | --name=<name> --alias=<alias>])"
  puts "git-fast -l opt([--del=<delimiter>]) [<logs>]"
  puts "git-fast -nb <branch-name>"
  puts "git-fast -p opt(<branch-name>)"
  puts "git-fast -pc --o=<branch-name>"
  puts "git-fast -pl opt(<branch-name>)"
  puts "git-fast -plc --o=<branch-name>"
  puts "git-fast -r opt(<flags>)"
  puts "git-fast [-s|status]"
  puts "git-fast -sc \"<some message>\" [-cl <args>|-ct <args>]"
  puts "git-fast -u"
  puts ""
end

def showNotGitRepoError()
  puts "Error: current directory is not a git repository."
  exit(128)
end

def checkIfIsGitRepo
  # suppressing the output of git status
  out = system "git", "status", :out => File::NULL, :err => File::NULL
  if $?.exitstatus != 0 then
    showNotGitRepoError()
  end
end

def showTooManyArgumentsError(flag, expected, len)
  puts "Error: #{flag} received too many arguments. Expected #{expected}, got #{len}."
  exit(128)
end

def showNotEnoughArgumentsError(flag, expected, len)
  puts "Error: #{flag} did not receive enough arguments. Expected #{expected}, got #{len}."
  exit(128)
end

def newBranch(args, flag)
  if args.length > 2 then showTooManyArgumentsError(flag, 1, args.length - 1) end
  if args.length == 1 then showNotEnoughArgumentsError(flag, 1, 0) end
  branch_name = args[1]
  puts "created new branch #{branch_name}"
  # puts `git checkout -b #{branch_name}`
end

def checkoutBranch(args, flag)
  if args.length > 2 then showTooManyArgumentsError(flag, 1, args.length - 1) end
  if args.length == 1 then showNotEnoughArgumentsError(flag, 1, 0) end
  branch_name = args[1]
  puts "checkout branch #{branch_name}"
  # puts `git checkout #{branch_name}`
end

def clone(args, flag)
  if args.length > 2 then showTooManyArgumentsError(flag, 1, args.length - 1) end
  if args.length == 1 then showNotEnoughArgumentsError(flag, 1, 0) end
  repo = args[1]
  puts "cloned #{repo}"
  # puts `git clone #{repo}`
end

def deleteBranch(args, flag)
  if args.length > 2 then showTooManyArgumentsError(flag, 1, args.length - 1) end
  if args.length == 1 then showNotEnoughArgumentsError(flag, 1, 0) end
  branch = args[1]
  puts "deleted #{branch}"
  # puts `git branch -d #{branch}`
end


# check if it is a git repository
checkIfIsGitRepo()

# create configuration file if it doesnt exist
if not File.exist?(CONFIG_FILE) then
  configFile = File.open(CONFIG_FILE, "w+")
  configFile.close
end

arg = ARGV[0]
index = 0
case arg
when "-l"
  handleLog(ARGV, index)
when "-c"
  commit(ARGV, index, "-c", true)
when "-pc"
  pushAtts(ARGV, index)
when "-p"
  # load from configuration unless it is specified
  push(ARGV, index, "-p", false, true)
when "-cp"
  commit(ARGV, index, "-cp", true)
  # do not expect more arguments
  push(ARGV, index, "-cp", true, false)
when "-gs"
  puts `git status`
when "-b"
  puts `git branch`
when "-ba"
  puts `git branch -a`
when "-r"
  removeConfig(ARGV, index)
when "status", "-s"
  showStatus()
when "-sc"
  # do not commit, only show message
  commit(ARGV, index, "-c", false)
when "-a"
  alwaysAddAll()
when "-i"
  issue(ARGV, index)
when "-nb"
  newBranch(ARGV, "-nb")
when "-fa"
  puts `git fetch --all`
when "-ch"
  checkoutBranch(ARGV, "-ch")
when "-u"
  puts `git remote get-url origin`
when "-cn"
  clone(ARGV, "-cn")
when "-d"
  deleteBranch(ARGV, "-d")
when "-di"
  puts `git diff`
when "-plc"
  pullAtts(ARGV)
when "--commands"
  printCommands()
else
  unsupportedCommand(arg)
end
