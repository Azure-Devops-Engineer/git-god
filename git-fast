#!/usr/bin/ruby
require 'find'
require 'tempfile'

CONFIG_FILE = ".git-fast"
TEMP_CONFIG = "temp.git-fast"
LOGGED = "logged"
LOG_PRIORITY = 0
DEFAULT_START_LOG = "["
DEFAULT_END_LOG = "]"

def handleLog(args, index, file)
  defaultDelimiter = true
  start_del = DEFAULT_START_LOG
  end_del = DEFAULT_END_LOG
  args.each_with_index do |arg, i|
    arg_spl = arg.split("=")
    case arg_spl[0]
    when "--del"

      if arg_spl.length == 1 then
        showDelimiterNotIncludedError()
        return
      end

      # only one character provided, use for both
      if arg_spl[1].length == 1 then
        log(args, i, file, arg_spl[1][0], arg_spl[1][0])
        return
      elsif arg_spl[1].length == 2 then
        log(args, i, file, arg_spl[1][0], arg_spl[1][1])
        return
      else
        showInvalidDelimiterError()
        return
      end
    end
  end

  log(args, index, file, start_del, end_del)
end

def showDelimiterNotIncludedError()
  puts "Error: delimiter is empty or it is invalid."
  toAddDelimiterTut()
end

def showInvalidDelimiterError()
  puts "Error: invalid delimiter supplied for log."
  toAddDelimiterTut()
end

def toAddDelimiterTut()
  puts "To add a delimiter, add flag --del=\"<delimiter>\". Note the double quotes."
  puts "<delimiter> must be one or two characters."
end

def log(args, index, file, start_del, end_del)
  # find the previous logged info
  logUsers = ""

  args[index + 1..-1].each do |arg|
    puts "Logged: #{arg}"
    logUsers += start_del + arg + end_del
  end

  tmp_file = Tempfile.new(TEMP_CONFIG)
  hasBeenLogged = false
  begin
    file.each_line do |line|
      if line.split("=")[0] == LOGGED then
      # overwrite
      hasBeenLogged = true
      tmp_file.write("#{LOGGED}=#{logUsers}")
    else
      tmp_file.write(line)
    end
  end

  # no log line exists
  if not hasBeenLogged then
    tmp_file.write("#{LOGGED}=#{logUsers}")
  end
  tmp_file.close
  # change the name and overwrite
  FileUtils.mv(tmp_file, file)
ensure
  tmp_file.close
  tmp_file.unlink
end
end

def isConfigFile(name)
  File.basename(name) == CONFIG_FILE
end

def existsConfigFile()
Find.find(Dir.pwd) do |e|
  next if File.directory?(e)
  if isConfigFile(e) then return true end
end
false
end

def removeConfig()
  if File.exist?(CONFIG_FILE) then File.delete(CONFIG_FILE) end
end

def showStatus(configFile)
  info = Hash.new
  configFile.each_line do |line|
    line_array = line.split("=")
    case line_array[0]
    when LOGGED
      info[LOG_PRIORITY] = line_array[1..-1]
    end
  end

  info.sort{ |k, v| k }.to_h
  info.each do |k, v|
    case k
    when LOG_PRIORITY
      puts "logged: #{v[0]}"
    end
  end
end

def getValues(configFile)
  info = Hash.new
  configFile.each_line do |line|
    line_array = line.split("=")
    info[line_array[0]] = line_array[1]
  end
  info
end

def commit(args, index, configFile)
  values = getValues(configFile)
  logUsers = values[LOGGED]
  message = logUsers + " " + args[1].to_s
  puts `git commit -m \"#{message}\"`
end

configFile = nil
# create configuration file if it doesnt exist
if not File.exist?(CONFIG_FILE) then
  configFile = File.open(CONFIG_FILE, "w+")
else
  configFile = File.open(CONFIG_FILE, "r+")
end

ARGV.each_with_index do |arg, index|
  case arg
  when "-l"
    handleLog(ARGV, index, configFile)
  when "-c"
    commit(ARGV, index, configFile)
  when "-r"
    removeConfig()
  when "status", "-s"
    showStatus(configFile)
  end
end

configFile.close
